=> minetest.voxel_area(minp, maxp)
	Same as VoxelArea:new({MinEdge = minp, MaxEdge = maxp}).

	Arguments :
		- minp (position) : The corner of the VoxelArea which has the smaller coordinates
		- maxp (position) : The opposite corner

	Return :
		- o (VoxelArea) : The new voxel area

=> mapgen.noise2d(minp, maxp, offset, scale, spread, seed, octaves, persist)
	To get a 2D perlin noise map.

	Arguments :
		- minp (position) : Minimal corner of the perlin noise map
		- maxp (position) : Maximal corner of the perlin noise map
		- offset (number) : The noise offset
		- scale (number) : The scale of the noise
		- spread (table) : This table has the same format than a position. It define how slow/fast the value changes in 2 dimensions
		- seed (number) : Each seed generate a different noise
		- octaves (number) : A high value result of more details but is slower
		- persist (number) : Depth of the details evoked previously

	Return :
		- noise (table) : An array of values starting at index 1

=> mapgen.noise3d(minp, maxp, offset, scale, spread, seed, octaves, persist)
	Same as above, but in 3D.

	Arguments :
		- minp (position) : Minimal corner of the perlin noise map
		- maxp (position) : Maximal corner of the perlin noise map
		- offset (number) : The noise offset
		- scale (number) : The scale of the noise
		- spread (table) : This table has the same format than a position. It define how slow/fast the value changes in 3 dimensions
		- seed (number) : Each seed generate a different noise
		- octaves (number) : A high value result of more details but is slower
		- persist (number) : Depth of the details evoked previously

	Return :
		- noise (table) : An array of values starting at index 1

=> VoxelArea:noise(offset, scale, spread, seed, octaves, persist)
	It returns a perlin noise map from a voxel area.
	Then you can use VoxelArea:index(pos) to get the noise value matching the position pos.

	Arguments :
		- offset (number) : The noise offset
		- scale (number) : The scale of the noise
		- spread (table) : This table has the same format than a position. It define how slow/fast the value changes. If there is no field "z", generate a 2D noise
		- seed (number) : Each seed generate a different noise
		- octaves (number) : A high value result of more details but is slower
		- persist (number) : Depth of the details evoked previously

	Return :
		- noise (table) : An array of values starting at index 1

=> VoxelArea:altitude(i)

	Arguments :
		- i (number) : index of the VoxelArea

	Return :
		- alt (number) : the y value (the altitude) of the position matching index i

=> mapgen.get_ids(node1, node2, node3 ...)
	Converts nodenames to content ids

	Arguments :
		- node1, node2, node3 ... (string or table) : Name of the nodes to convert to ids, or table containing these names

	Return :
		- id1, id2, id3 ... (number or table) : If number, the content id ; if table, array of ids, with exactely the same structure than the argument table

	For example :	mapgen.get_ids(nodename1, nodename2, {nodename3, {nodename4}, stuff = nodename5}, nodename6)
	returns :	id_of_node1, id_of_node2, {id_of_node3, {id_of_node4}, stuff = id_of_node5}, id_of_node6

=> mapgen.average_time()
	Returns average generation time

	No arguments

	Return :
		- t (number) : The average generation time in seconds



TO MAKE A MAPGEN :

Write a lua file which defines the following functions. These functions are not functions that mapgen_lib defines and you call, it's the contrary !
If you omit one of them, this poses no problem.

=> mapgen.on_generated(minp, maxp, data, param, param2, area, seed)
	Used to make the base map with the VoxelManipulator.

	Arguments :
		- minp (position) : The corner of the generated chunk which has the smallest coordinates
		- maxp (position) : The opposite corner
		- data (table) : A huge array containing the ids of all nodes in the chunk
		- param (table) : Same as above, but contains the param (light) levels ; integers from 0 to 255 (day light + night light * 16)
		- param2 (table) : Same as above, but contains the param2 values
		- area (VoxelArea) : A Voxel Area to help you ; you can use area:iterp(minp, maxp) or area:index(pos) for example
		- seed (number) : The seed of the world ; currently a 32-bit integer

	Return :
		- data (table) : The content id array
		- param (table or boolean) : The light data array ; if you returns the boolean true instead of the array, light is calculated automatically.
		- param2 (table) : Array containing the param2 values

=> mapgen.after_generated(minp, maxp, seed)
	Called after the base map generation by the VoxelManip. Used to generate complementary structures like trees or villages.

	Arguments :
		- minp (position) : The corner of the generated chunk which has the smallest coordinates
		- maxp (position) : The opposite corner
		- seed (number) : The seed of the world ; currently a 32-bit integer

	Return nothing

=> mapgen.spawn_player(player, seed)
	Used to define where the player is spawned in the world. You can also generate structures like platforms by minetest.set_node.

	Arguments :
		- player (ObjectRef) : The player to spawn
		- seed (number) : The seed of the world ; currently a 32-bit integer

	Return :
		- pos (position) : The position at which the player appears

And you can define mapgen.params_formspec, if any, it is shown after choosing the mapgen and before generating map. The sent fields are stored in mapgen.params.

When all is done, create a folder "mapgen" in your mod folder and put this lua file in it.
